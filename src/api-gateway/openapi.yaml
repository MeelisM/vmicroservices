openapi: 3.0.0
info:
  title: Crud Master API
  description: |
    A microservices-based API for a movie streaming platform. The architecture consists of:
    - API Gateway: Entry point for all requests
    - Inventory Service: Manages movie catalog (CRUD operations)
    - Billing Service: Processes orders through RabbitMQ message queue
    All services are deployed across separate virtual machines for isolation and scalability.
  version: 1.0.0
servers:
  - url: http://192.168.56.10:8000
    description: Production server
paths:
  /api/movies:
    get:
      summary: Get all movies
      parameters:
        - in: query
          name: title
          schema:
            type: string
          description: Filter movies by title
      responses:
        "200":
          description: List of movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Movie"
              example:
                - id: 1
                  title: "Rambo"
                  description: "Very short description"
                  createdAt: "2025-02-18T13:13:00.628Z"
                  updatedAt: "2025-02-18T13:13:00.628Z"
    post:
      summary: Create a new movie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MovieInput"
            example:
              title: "New Movie"
              description: "Movie Description"
      responses:
        "201":
          description: Movie created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
    delete:
      summary: Delete all movies
      responses:
        "200":
          description: All movies deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "All movies were deleted successfully"

  /api/movies/{id}:
    get:
      summary: Get movie by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Movie details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
        "404":
          description: Movie not found
    put:
      summary: Update movie by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MovieInput"
      responses:
        "200":
          description: Movie updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
    delete:
      summary: Delete movie by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Movie deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Movie was deleted successfully"

  /api/billing:
    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderInput"
            example:
              user_id: "3"
              number_of_items: "5"
              total_amount: "180"
      responses:
        "200":
          description: Order queued successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Order has been queued for processing"
        "500":
          description: Error processing order

components:
  schemas:
    Movie:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - description

    MovieInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
      required:
        - title
        - description

    OrderInput:
      type: object
      properties:
        user_id:
          type: string
        number_of_items:
          type: string
        total_amount:
          type: string
      required:
        - user_id
        - number_of_items
        - total_amount
